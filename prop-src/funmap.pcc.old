///////////////////////////////////////////////////////////////////////////////
//
//  This file implements the FunctorMap data structure 
//
///////////////////////////////////////////////////////////////////////////////
#include <iostream.h>
#include <strstream.h>
#include <AD/automata/treegram.ph>
#include <AD/automata/treegen.h>
#include <AD/rewrite/burs_gen.h>
#include <AD/strings/quark.h>
#include "funmap.ph"
#include "ir.ph"
#include "ast.ph"
#include "matchcom.ph"
#include "type.h"
#include "hashtab.h"
#include "datagen.h"
#include "config.h"
#include "rwgen.h"
#include "options.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Import some type definitions from the tree grammar and hash table
//  classes.
//
///////////////////////////////////////////////////////////////////////////////
typedef TreeGrammar::TreeProduction TreeProduction;
typedef TreeGrammar::Cost           TreeCost;
typedef HashTable::Key              Key;
typedef HashTable::Value            Value;

///////////////////////////////////////////////////////////////////////////////
//
//  Instantiate the vector id type
//
///////////////////////////////////////////////////////////////////////////////
instantiate datatype VectorId;

///////////////////////////////////////////////////////////////////////////////
//
//  Hashing and equality on vector id's
//
///////////////////////////////////////////////////////////////////////////////
unsigned int vector_id_hash(HashTable::Key k)
{  VectorId id = (VectorId)k;
   return (unsigned int)id->cons + ty_hash(id->ty) + id->arity;
}
Bool vector_id_equal(HashTable::Key a, HashTable::Key b)
{  VectorId x = (VectorId)a;
   VectorId y = (VectorId)b;
   return x->cons == y->cons && x->arity == y->arity && ty_equal(x->ty,y->ty); 
}

///////////////////////////////////////////////////////////////////////////////
//
//  Method to decorate cost expression and attribute bindings for
//  a pattern.
//
///////////////////////////////////////////////////////////////////////////////
int decor_rewrite (Pat pat, int rule, int kid, PatternVarEnv& E)
{  match while (pat)
   {  NOpat || LITERALpat _ || CONSpat _: { return kid; }
   |  ASpat (_,p,_,_):           { pat = p; } 
   |  MARKEDpat(_,p):            { pat = p; }
   |  TYPEDpat(p,_):             { pat = p; } 
   |  GUARDpat(p,_):             { pat = p; }
   |  APPpat (_,p):              { pat = p; }
   |  CONTEXTpat(_,p):           { pat = p; }
   |  TUPLEpat ps:               
      {  return decor_rewrite(ps, rule, kid, E); }
   |  LISTpat{nil,cons,head=ps,tail=rest}: 
      {  kid = decor_rewrite(ps, rule, kid, E); pat = rest; }
   |  VECTORpat { len, array, elements, head_flex, tail_flex ... }:
      {  kid = decor_rewrite(elements, rule, 
                  decor_rewrite(array, rule, kid, E), E); 
         if (head_flex || tail_flex)
            error("%Lflexible vector pattern currently not supported in rewriting: %p\n", pat); 
         pat = len;
      }
   |  IDpat (id,_,_):
      {  Id attrib_name = #"#" + id;
         Id cost_name   = #"$" + id;
         Ty ty;
         E.add (attrib_name, SYNexp(kid, rule, mkvar()), ty, ISpositive);
         E.add (cost_name, COSTexp(kid),  ty, ISpositive);
         return kid+1;
      }
   |  _:  { return kid; }
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Decorate a pattern list.
//
///////////////////////////////////////////////////////////////////////////////
int decor_rewrite (Pats pats, int rule, int kid, PatternVarEnv& E)
{  for_each (Pat, p, pats) kid = decor_rewrite(p, rule, kid, E);
   return kid;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Decorate rewriting patterns.
//
///////////////////////////////////////////////////////////////////////////////
int decor_rewrite (Pat pat, int rule, PatternVarEnv& E)
{  Ty ty;
   E.add (#"##", THISSYNexp(rule,mkvar()), ty, ISpositive);
   E.add (#"$$", THISCOSTexp, ty, ISpositive);
   return decor_rewrite (pat, rule, 0, E);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Mapping from rewrite class to protocols.
//
///////////////////////////////////////////////////////////////////////////////
HashTable rewrite_env(string_hash, string_equal);
HashTable rewrite_qual(string_hash, string_equal);

///////////////////////////////////////////////////////////////////////////////
//
//  Enter a rewrite class
//
///////////////////////////////////////////////////////////////////////////////
void add_rewrite_class(Id id, Protocols protocols, TyQual qual)
{  if (rewrite_env.contains(id)) {
      error ("%Lrewrite class %s has already been defined\n", id);
   } else {
      rewrite_env.insert(id, protocols);
      rewrite_qual.insert(id, (HashTable::Value)qual);
      debug_msg ("[Rewriting class %s declared]\n", id);
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Lookup a rewrite class 
//
///////////////////////////////////////////////////////////////////////////////
Protocols lookup_rewrite_class(Id id)
{  HashTable::Entry * e = rewrite_env.lookup(id);
   if (e == 0) {
      error ("%Lrewrite class %s is undefined\n", id);
      return #[];
   } else {
      return (Protocols)rewrite_env.value(e);
   } 
}

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor of the functor mapping table.
//
///////////////////////////////////////////////////////////////////////////////
FunctorMap::FunctorMap(int n, Id name) 
                        : class_name(name), N(n),
                          literal_map(literal_hash,literal_equal,129), 
                          var_map    (string_hash,string_equal),
                          type_map   (ty_hash,ty_equal),
                          vector_map (vector_id_hash,vector_id_equal),
                          rule_map   (ty_hash,ty_equal),
                          protocols  (ty_hash,ty_equal),
                          nonterm_map(string_hash,string_equal),
                          functors   (0),
                          variables  (0),
                          tree_gen   (0),
                          use_compression(true),
                          has_guard(false),
                          has_cost(false),
                          has_cost_exp(false),
                          has_syn_attrib(false),
                          use_stack(false),
                          iso_tree(false),
                          gen_traversal(false),
                          max_arity(1)
                          {}

///////////////////////////////////////////////////////////////////////////////
//
//  Check whether we know of the type
//
///////////////////////////////////////////////////////////////////////////////
Bool FunctorMap::is_known_type(Ty ty)
{  return type_map.contains(ty)      ||
          ty_equal(ty, integer_ty)   ||
          ty_equal(ty, bool_ty)      ||
          ty_equal(ty, real_ty)      ||
          ty_equal(ty, string_ty)    ||
          ty_equal(ty, character_ty)
   ;
} 

///////////////////////////////////////////////////////////////////////////////
//
//  Check whether we the type is rewritable.
//
///////////////////////////////////////////////////////////////////////////////
Bool FunctorMap::is_rewritable_type(Ty ty) { return type_map.contains(ty); } 

///////////////////////////////////////////////////////////////////////////////
//
//  Method to assign variable encoding to a non-terminal
//
///////////////////////////////////////////////////////////////////////////////
void FunctorMap::encode (Id id)
{  if (! var_map.contains(id))
   {  ++variables;
      var_map.insert(id,(HashTable::Value)(variables));
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Method to assign functor encoding to a type
//
///////////////////////////////////////////////////////////////////////////////
void FunctorMap::encode (Ty ty)
{  match (deref_all(ty))
   {  ty as TYCONty(DATATYPEtycon { unit, arg ... }, _):
      {  if (! type_map.contains(ty)) 
         {  type_map.insert(ty, (HashTable::Value)functors);
            functors += unit + arg;
         }
      }
   |  TYCONty(_,tys): {  for_each(Ty, ty, tys) encode(ty); }
   |  _:  // skip
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Method to assign functor encoding to a pattern.
//  Assign a functor value to each distinct literal and pattern constructor.
//
///////////////////////////////////////////////////////////////////////////////
void FunctorMap::encode(Pat pat)
{  match while (pat)
   {  NOpat || WILDpat _ || IDpat _: { return; }
   |  ASpat(_,p,_,_):  { pat = p; }
   |  TYPEDpat(p,_):   { pat = p; }
   |  MARKEDpat(_,p):  { pat = p; }
   |  TUPLEpat ps:     
      {  int i = 0; 
         for_each (Pat, p, ps) { i++; encode(p); }
         if (max_arity < i) max_arity = i;
         return; 
      }
   |  RECORDpat(lab_pats,_): 
      {  for_each (LabPat, p, lab_pats) { encode(p.pat); }
         int arity = arity_of(pat->ty);
         if (max_arity < arity) max_arity = arity;
         return;
      }
   |  LITERALpat l:                
      {  if (! literal_map.contains(l)) 
         {  literal_map.insert(l,(HashTable::Value)functors); 
            functors++; 
         }
         return;
      }
   |  CONSpat(ONEcons 
              { alg_ty = alg_ty as 
                   TYCONty(DATATYPEtycon { unit, arg, terms ... },_) 
                ... }):
      {  if (pat->ty != NOty && ! type_map.contains(pat->ty)) 
         {  type_map.insert(pat->ty, (HashTable::Value)functors);
            functors += unit + arg;
         }
         return;
      }  
   |  APPpat(a,b):  { encode(pat->ty); pat = b; }
   |  LISTpat{cons,nil,head=ps,tail=p}:
      {  Pat new_pat = CONSpat(nil);
         new_pat->ty = pat->ty;
         encode(new_pat);
         for_each (Pat, i, ps) encode(i);
         if (max_arity < 2) max_arity = 2;
         pat = p;
      }
   |  VECTORpat { cons, elements ... }:
      {  Pat new_pat = CONSpat(cons);
         new_pat->ty = pat->ty;
         encode(new_pat);
         for_each (Pat, p, elements) encode(p); 
         int l = length(elements);
         if (max_arity < l) max_arity = l;
         if (pat->ty != NOty)
         {  VectorId vec_id = vector_id(cons,pat->ty,l);
            if ( ! vector_map.contains(vec_id))
            {  vector_map.insert(vec_id, (HashTable::Value)functors);
               functors++;
            }
         }
         return;
      }
   |  _: { error ("%LSorry: pattern not supported in rewriting: %p\n", pat); return; }
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Method to translate a pattern into a term.
//
///////////////////////////////////////////////////////////////////////////////
TreeTerm FunctorMap::trans(Pat pat)
{  match while (pat)
   {  NOpat || WILDpat _: { return wild_term; }
   |  ASpat(_,p,_,_):     { pat = p; }
   |  TYPEDpat(p,_):      { pat = p; }
   |  MARKEDpat(_,p):     { pat = p; }
   |  LITERALpat l:     
      {  return new_term(mem_pool,(Functor)literal_map[l]); } 
   |  IDpat (id,_,_):                
      {  return var_map.contains(id) ? 
            var_term((Variable)var_map[id]) : wild_term; 
      }
   |  TUPLEpat pats: 
      {  int arity = length (pats);
         TreeTerm * subterms = 
            (TreeTerm *)mem_pool.c_alloc(sizeof(TreeTerm) * arity);
         int i = 0; 
         for_each (Pat, p, pats)
         {  subterms[i++] = trans(p); }
         return new_term(mem_pool,0,arity,subterms);
      }
   |  RECORDpat (lab_pats,_):
      {  match (deref(pat->ty))
         {  RECORDty (labels,_,tys):
            {  Bool relevant[256]; int i; int arity;
               arity = 0;
               for_each(Ty, t, tys) 
               {  if (relevant[i++] = is_known_type(t)) arity++; }
               TreeTerm * subterms = 
                  (TreeTerm *)mem_pool.c_alloc(sizeof(TreeTerm) * arity);
               for (i = 0; i < arity; i++)
                  subterms[i] = wild_term;
               for_each (LabPat, p, lab_pats)
               {  Ids labs; Tys ts;
                  for (i = 0, labs = labels, ts = tys; 
                       labs && ts; labs = labs->_2, ts = ts->_2)
                  {  if (p.label == labs->_1)
                     {  subterms[i] = trans(p.pat); break; }
                     if (is_known_type(ts->_1)) i++;
                  }
               }
               return new_term(mem_pool,0,arity,subterms);
            }
         |  _: { bug("%Lillegal record pattern %p\n", pat); }
         }
      }
   |  APPpat(CONSpat(ONEcons 
              { ty = arg_ty, tag, 
                alg_ty = TYCONty(DATATYPEtycon { unit ... },_) ... 
              }), p):
      {  TreeTerm a = trans(p);
         match (arity_of(arg_ty)) and (a)
         {  1, _: 
            {  return new_term(mem_pool, 
                  (Functor)type_map[pat->ty]+unit+tag,1,&a); 
            }
         |  _, tree_term(f,_,_):
            {  f = (Functor)type_map[pat->ty]+unit+tag; return a; }
         |  n, _:
            {  return new_term(mem_pool,
                  (Functor)type_map[pat->ty]+unit+tag, n);
            }
         }
      }
   |  CONSpat(ONEcons { tag ... }):
      {  return new_term(mem_pool, (Functor)type_map[pat->ty]+tag); }
   |  LISTpat{ nil, head = #[], tail = NOpat ... }: 
      {  Pat p = CONSpat(nil); p->ty = pat->ty; pat = p; }
   |  LISTpat{ head = #[], tail ... }:   {  pat = tail; }
   |  LISTpat{ cons, nil, head = #[h ... t], tail }: 
      {  Pat new_tail = LISTpat'{cons=cons,nil=nil,head=t,tail=tail};
         Pat new_p    = APPpat(CONSpat(cons),TUPLEpat(#[h, new_tail]));
         new_p->ty    = new_tail->ty = pat->ty;
         pat = new_p;
      }
   |  VECTORpat { cons, elements ... }:
      {  TreeTerm a     = trans(TUPLEpat(elements));
         int      arity = length(elements);
         match (a)
         {  tree_term(f,_,_):
            {  f = (Functor)vector_map[vector_id(cons,pat->ty,arity)]; 
               return a; 
            }
         |  _: 
            { bug ("%Lillegal pattern: %p\n", pat); return wild_term; }
         }
      }
   |  _: { error ("%LSorry: pattern not supported: %p\n", pat); return wild_term; }
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Method to partition the set of rules according to the types of the
//  patterns.  Also encode the patterns in the process.
//
///////////////////////////////////////////////////////////////////////////////
void FunctorMap::partition_rules (MatchRules rules)
{  // First, we assign a new type variable for each lhs non-terminal.
   {  for_each (MatchRule, r, rules)
      {  match (r)
         {  MATCHrule(lhs,_,_,_,_):
            {  if (lhs)
               {  HashTable::Entry * lhs_entry = nonterm_map.lookup(lhs);
                  if (! lhs_entry) nonterm_map.insert(lhs,mkvar());
                  encode(lhs);  // compute encoding for the variable
               }
            }
         }
      }
   }

   // Type check all the rules next.
   // We have to also compute the type map for each lhs non-terminal.
   // Of course, a non-terminal but have only one single type.
   // This is done by unifying all occurances of a non-terminal.

   patvar_typemap = &nonterm_map; // set the pattern variable type map

   for_each (MatchRule, r, rules)
   {  match (r)
      {  MATCHrule(lhs,pat,_,_,_):
         {  r->set_loc();
            Ty ty = r->ty = type_of(pat); 

            // Check the type of the non-terminal (if any).
            if (lhs)
            {  Ty lhs_ty = Ty(nonterm_map.lookup(lhs)->v);
               if (! unify(lhs_ty, ty))
               {  error("%!type mismatch between nonterminal %s(type %T) and rule %r(type %T)\n",
                        r->loc(),lhs,lhs_ty,r,ty);
               }
            }
            
            if (! is_datatype(ty))
               error ("%!rule %r is of a non datatype: %T\n",r->loc(),r,ty); 
         }
      }
   }

   patvar_typemap = 0; // reset the pattern variable type map

   // Now partition rules by type and assign functor encoding.
   // Since we have also typed the rules, this is quite simple: just
   // another pass.  We have to make sure that after the type inference
   // we don't have any more polymorphic types inside the patterns.
   int rule_num = 0;
   for_each (MatchRule, R, rules)
   {  match (R)
      {  MATCHrule(_,pat,_,_,_):
         {  if (! is_ground(R->ty))
               error ("%!rule %r has incomplete type %T\n",R->loc(),R,R->ty); 
            HashTable::Entry * e = rule_map.lookup(R->ty);
            if (e) e->v = #[ R ... (MatchRules)e->v ];
            else rule_map.insert(R->ty,#[ R ]);
            // assign functor encoding
            encode(pat);
            R->rule_number = rule_num++;
         }
      }
   }
} 

///////////////////////////////////////////////////////////////////////////////
//
//  Method to compute the functor and variable table.
//
///////////////////////////////////////////////////////////////////////////////
void FunctorMap::compute_names (Id fun_names[], Id var_names [])
{  functor_names  = fun_names;
   variable_names = var_names;
   {  for (int i = N + variables - 1; i >= 0; i--) variable_names[i] = 0; }
   {  for (int i = functors - 1; i >= 0; i--)  functor_names[i] = "???"; }
   variable_names[0] = "_";

   // Compute variable names
   {  foreach_entry (i,var_map) 
        variable_names[(Variable)var_map.value(i)] = (Id)var_map.key(i);
   }

   // Compute literal names
   {  foreach_entry (i,literal_map) 
      {  Literal l = (Literal)literal_map.key(i); 
         Functor f = (Functor)literal_map.value(i);
         char buf[1024];
         ostrstream b(buf,sizeof(buf));
         ostream& s = b;
         s << l << ends;
         functor_names[f] = Quark(buf); 
      }
   }

   // Compute constructor names
   {  foreach_entry (i,type_map) 
      {  Ty      t = (Ty)type_map.key(i); 
         Functor f = (Functor)type_map.value(i);
         match (deref(t))
         {  TYCONty(DATATYPEtycon { unit, arg, terms ... },_):
            {  int arity = unit + arg;
               for (int j = 0; j < arity; j++)
               {  match (terms[j])
                  {  ONEcons { name, ty, tag ... }:
                     {  functor_names[f + (ty == NOty ? tag : tag + unit)] =
                           name;
                     }
                  |  _: // skip
                  }
               }
            }
         |  _: { bug ("compute_names()"); }
         }
      }
   }

   // Compute vector constructor names
   {  foreach_entry (i, vector_map)
      {  VectorId id = (VectorId)vector_map.key(i);
         Functor  f  = (Functor)vector_map.value(i);
         if (id->cons) functor_names[f] = id->cons->name;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Method to print a report detailing the functor/variable encoding,
//  the tree grammar and the generated table size.
//
///////////////////////////////////////////////////////////////////////////////
void FunctorMap::print_report (ostream& log)
{ 
   if (var_map.size() > 0) 
   {  log << "Variable encoding:\n";
      foreach_entry (e, var_map)
      {  log << "\tnon-terminal \"" << (Id)var_map.key(e) << "\"\t=\t"
             << (Variable)var_map.value(e) << '\n';
      } 
   }

   if (literal_map.size() > 0) 
   {  log << "\nFunctor encoding for literals:\n";
      foreach_entry (e, literal_map)
      {  log << "literal " << (Literal)literal_map.key(e) << "\t=\t"
             << (Functor)literal_map.value(e) << '\n';
      }
   }

   log << "\nFunctor encoding for constructors:\n";

   {  foreach_entry (e, type_map)
      {  Ty      t = (Ty)type_map.key(e);
         Functor f = (Functor)type_map.value(e);
         log << "datatype " << t << ":\n"; 
         match (deref(t))
         {  TYCONty(DATATYPEtycon { unit, arg, terms ... },_):
            {  int arity = unit + arg;
               for (int i = 0; i < arity; i++)
               {  match (terms[i])
                  {  ONEcons { name, ty, tag ... }:
                     {  log << '\t' << name << "\t=\t" 
                            << f + (ty == NOty ? tag : tag + unit) << '\n';
                     }
                  |  _: // skip
                  }
               }
            }
         |  _: // skip
         }
      }
   }

   log << "\nIndex compression is " 
       << (use_compression ? "enabled" : "disabled")
       << "\nAlgorithm is " << tree_gen->algorithm();

   if (tree_gen) tree_gen->print_report(log);
}
