///////////////////////////////////////////////////////////////////////////////
//
//  This file describes the interface of the rewriting compiler.
//
///////////////////////////////////////////////////////////////////////////////
#ifndef rewriting_compiler_h
#define rewriting_compiler_h

#include "matchcom.h"

class FunctorMap;
class TreeGrammar;

///////////////////////////////////////////////////////////////////////////////
//
//  The rewriting compiler is inherited from the pattern matcher.
//
///////////////////////////////////////////////////////////////////////////////
class RewritingCompiler : virtual public CodeGen,
                          virtual public MatchCompiler 
{
   RewritingCompiler(const RewritingCompiler&); // no copy constructor
   void operator = (const RewritingCompiler&);  // no assignment

private:

   Decls rewriters; // outstanding rewriting declarations.

public:
   ////////////////////////////////////////////////////////////////////////////
   //  Constructor and destructor
   ////////////////////////////////////////////////////////////////////////////
            RewritingCompiler(ostream&);
   virtual ~RewritingCompiler();

protected:
   ////////////////////////////////////////////////////////////////////////////
   //  Methods for compiling rewriting
   ////////////////////////////////////////////////////////////////////////////

   // generate a set of rewrite rules
   void gen_rewrite  (Id, MatchRules);

   // generate a rewrite statement
   void gen_rewriting(Protocols, Exp, Exp, MatchRules, TyQual);

   // generate a set of outstanding rewrite statements
   void gen_rewriters();
private:
   ////////////////////////////////////////////////////////////////////////////
   //  Methods for compiling a topdown tree pattern matcher
   ////////////////////////////////////////////////////////////////////////////
   void gen_topdown          (Id, MatchRules, int, Protocols, FunctorMap&,
                              TyQual, TreeGrammar&, Id [], Id []);
   void gen_topdown_driver   (Id, MatchRules, FunctorMap&);

   ////////////////////////////////////////////////////////////////////////////
   //  Methods for compiling a bottomup tree pattern matcher
   ////////////////////////////////////////////////////////////////////////////
   void gen_bottomup          (Id, MatchRules, int, Protocols, FunctorMap&,
                               TyQual, TreeGrammar&, Id [], Id []);
   void gen_bottomup_literal  (Id, TyQual, Ty, FunctorMap&);
   void gen_bottomup_datatype (Id, TyQual, Ty, FunctorMap&);
   void gen_datatype_traversal(FunctorMap&, Ty);
   int  gen_pattern_traversal (FunctorMap&, Pat, int);
};

#endif
